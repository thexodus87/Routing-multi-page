{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Burak\\\\multi-page\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  // if (data.isError) {\n  //   return <p>{data.message}</p>;\n  // }\n  //bu kodun alternatifi aşağıda\n\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events1');\n  if (!response.ok) {\n    // return {isError: true, message: 'Etkinliğe ulaşılamadı.'} \n    // throw {message: 'Etkinliğe ulaşılamadı.'};        \n    throw new Response(JSON.stringify({\n      mesaage: 'Etkinliğe ulaşılamadı.'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","Response","JSON","stringify","mesaage","status","$RefreshReg$"],"sources":["C:/Users/Burak/multi-page/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":[" import { useLoaderData } from \"react-router-dom\";\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n\r\n     const data = useLoaderData();\r\n     const events = data.events;\r\n    // if (data.isError) {\r\n    //   return <p>{data.message}</p>;\r\n    // }\r\n    //bu kodun alternatifi aşağıda\r\n\r\n  return <EventsList events={events} />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function loader () {\r\n    const response = await fetch('http://localhost:8080/events1');\r\n\r\n    if (!response.ok) { \r\n      // return {isError: true, message: 'Etkinliğe ulaşılamadı.'} \r\n      // throw {message: 'Etkinliğe ulaşılamadı.'};        \r\n      throw new Response(JSON.stringify({mesaage: 'Etkinliğe ulaşılamadı.'}),\r\n      {status: 500,}\r\n      );\r\n    } else {\r\n      return response;       \r\n    }\r\n  }\r\n"],"mappings":";;AAAC,SAASA,aAAa,QAAQ,kBAAkB;AAEjD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEjB,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC;EAC5B,MAAMO,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC3B;EACA;EACA;EACA;;EAEF,oBAAOJ,OAAA,CAACF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACN,EAAA,CAVQD,UAAU;EAAA,QAEDJ,aAAa;AAAA;AAAAY,EAAA,GAFtBR,UAAU;AAYnB,eAAeA,UAAU;AAEzB,OAAO,eAAeS,MAAMA,CAAA,EAAI;EAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;EAE7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACC,OAAO,EAAE;IAAwB,CAAC,CAAC,EACtE;MAACC,MAAM,EAAE;IAAI,CACb,CAAC;EACH,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACF;AAAC,IAAAF,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}